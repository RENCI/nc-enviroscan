from __future__ import unicode_literals
from django.contrib.gis.db import models
from rest_framework_mvt.managers import MVTManager
from django.db import models as omodels

# Create your models here.
STATUS_CHOICES = (
    ('d', 'Draft'),
    ('p', 'Published')
)

# Create your models here.
class ncwellwise_subset_20102019(models.Model):
    geoid10 = models.TextField(11,null=False)
    arsenic_mean = models.FloatField(null=True)
    arsenic_med = models.FloatField(null=True)
    arsenic_prcast = models.FloatField(null=True)
    arsenic_minimum = models.FloatField(null=True)
    arsenic_maximum = models.FloatField(null=True)
    arsenic_std = models.FloatField(null=True) 
    cadmium_mean = models.FloatField(null=True)
    cadmium_med = models.FloatField(null=True)
    cadmium_prcast = models.FloatField(null=True)
    cadmium_minimum = models.FloatField(null=True)
    cadmium_maximum = models.FloatField(null=True)
    cadmium_std = models.FloatField(null=True)
    lead_mean = models.FloatField(null=True)
    lead_med = models.FloatField(null=True)
    lead_prcast = models.FloatField(null=True)
    lead_minimum = models.FloatField(null=True)
    lead_maximum = models.FloatField(null=True)
    lead_std = models.FloatField(null=True)
    manganese_mean = models.FloatField(null=True)
    manganese_med = models.FloatField(null=True)
    manganese_prcast = models.FloatField(null=True)
    manganese_minimum = models.FloatField(null=True)
    manganese_maximum = models.FloatField(null=True)
    manganese_std = models.FloatField(null=True)

class acs_2019_5y_estimates(models.Model):
    geoid10 = models.TextField(2,null=False)
    percent_below_poverty_level = models.FloatField(null=True)
    speak_a_language_other_than_english = models.FloatField(null=True)
    two_or_more_races = models.FloatField(null=True)
    asian_alone = models.FloatField(null=True)
    american_indian_and_alaska_native_alone = models.FloatField(null=True)
    native_hawaiian_and_other_pacific_islander_alone = models.FloatField(null=True)
    white_alone = models.FloatField(null=True)
    black_or_african_american_alone = models.FloatField(null=True)
    not_hispanic_or_latino = models.FloatField(null=True)
    hispanic_or_latino_of_any_race = models.FloatField(null=True)

class ejscreen_subset(models.Model):
    geoid10 = models.TextField(12,null=False)
    d_ldpnt_2 = models.FloatField(null=True)
    d_dslpm_2 = models.FloatField(null=True)
    d_cancr_2 = models.FloatField(null=True)
    d_resp_2 = models.FloatField(null=True)
    d_ptraf_2 = models.FloatField(null=True)
    d_pwdis_2 = models.FloatField(null=True)
    d_pnpl_2 = models.FloatField(null=True)
    d_prmp_2 = models.FloatField(null=True)
    d_ptsdf_2 = models.FloatField(null=True)
    d_ozone_2 = models.FloatField(null=True)
    d_pm25_2 = models.FloatField(null=True)

class nc_covid_zipcode(models.Model):
    zipcode = models.TextField(5,null=False)
    cases = models.IntegerField()
    cases_per_10000_res = models.FloatField(null=True)
    cases_per_100000_res = models.FloatField(null=True) 
    deaths = models.IntegerField()

class nc_preterm_subset(models.Model):
    geoid10 = models.TextField(11, null=True)
    fc_calcega_mean_avg = models.FloatField(null=True)
    fc_calcega_med = models.FloatField(null=True) 
    fc_calcpreterm_percentage = models.FloatField(null=True)
    fc_clinega_mean_avg = models.FloatField(null=True)
    fc_clinega_med = models.FloatField(null=True)
    fc_clinpreterm_percentage = models.FloatField(null=True)
    sc_calcega_mean_avg = models.FloatField(null=True)
    sc_calcega_med = models.FloatField(null=True)
    sc_calcpreterm_percentage = models.FloatField(null=True)
    sc_clinega_mean_avg = models.FloatField(null=True)
    sc_clinega_med = models.FloatField(null=True)
    sc_clinpreterm_percentage = models.FloatField(null=True)

class nc_wildfires(models.Model):
    geoid20 = models.TextField(11, null=True)
    wildfire_haz_pot_qnum = models.FloatField()
    wildfire_haz_pot_qprcnt = models.TextField(8, null=False) 

class nc_census_tracks_4326(models.Model):
    geoid10 = models.TextField(11, null=True)
    total_pop = models.IntegerField()
    onemapsdea = models.IntegerField()
    shapestare = models.FloatField(null=True)
    shapestlen = models.FloatField(null=True)
    geom = models.MultiPolygonField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()

class nc_census_bg_4326(models.Model):
    geoid10 = models.TextField(11, null=True)
    total_pop = models.IntegerField()
    onemapsdea = models.IntegerField()
    shapestare = models.FloatField(null=True)
    shapestlen = models.FloatField(null=True)
    geom = models.MultiPolygonField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()

class zip_code_areas_4326(models.Model):
    objectid = models.IntegerField()
    zcta5ce10 = models.TextField(5,null=True)
    affgeoid10 = models.TextField(14,null=True)
    geoid10 = models.TextField(5,null=True)
    aland10 = models.IntegerField()
    awater10 = models.IntegerField()
    shapestare = models.FloatField(null=True)
    shapestlen = models.FloatField(null=True)
    geom = models.MultiPolygonField(null=True)
    #vector_tiles = MVTManager()
    objects = models.Manager()
    vector_tiles = MVTManager()

class ncdot_county_boundaries(models.Model):
    objectid = models.IntegerField()
    fips = models.IntegerField() 
    countyname = models.TextField(12,null=True) 
    uppercount = models.TextField(12,null=True)
    sapcountyi = models.TextField(3,null=True) 
    dotdistric = models.IntegerField() 
    dotdivisio = models.IntegerField() 
    sap_cnty_n = models.IntegerField() 
    cnty_nbr = models.IntegerField() 
    dstrct_nbr = models.IntegerField() 
    div_nbr = models.IntegerField() 
    name = models.TextField(12,null=True) 
    shapestare = models.FloatField(null=True) 
    shapestlen = models.FloatField(null=True) 
    geom = models.MultiLineStringField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()

class ncwellwise_subset_20102019_geom(models.Model):
    geoid10 = models.TextField(2,null=False)
    arsenic_mean = models.FloatField(null=True)
    arsenic_med = models.FloatField(null=True)
    arsenic_prcast = models.FloatField(null=True)
    arsenic_minimum = models.FloatField(null=True)
    arsenic_maximum = models.FloatField(null=True)
    arsenic_std = models.FloatField(null=True)
    cadmium_mean = models.FloatField(null=True)
    cadmium_med = models.FloatField(null=True)
    cadmium_prcast = models.FloatField(null=True)
    cadmium_minimum = models.FloatField(null=True)
    cadmium_maximum = models.FloatField(null=True)
    cadmium_std = models.FloatField(null=True)
    lead_mean = models.FloatField(null=True)
    lead_med = models.FloatField(null=True)
    lead_prcast = models.FloatField(null=True)
    lead_minimum = models.FloatField(null=True)
    lead_maximum = models.FloatField(null=True)
    lead_std = models.FloatField(null=True)
    manganese_mean = models.FloatField(null=True)
    manganese_med = models.FloatField(null=True)
    manganese_prcast = models.FloatField(null=True)
    manganese_minimum = models.FloatField(null=True)
    manganese_maximum = models.FloatField(null=True)
    manganese_std = models.FloatField(null=True)
    geom = models.MultiPolygonField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()

    class Meta:
        managed = False
        db_table = "drf_ncwellwise_subset_20102019_geom"

class acs_2019_5y_estimates_geom(models.Model):
    geoid10 = models.TextField(2,null=False)
    percent_below_poverty_level = models.FloatField(null=True)
    speak_a_language_other_than_english = models.FloatField(null=True)
    two_or_more_races = models.FloatField(null=True)
    asian_alone = models.FloatField(null=True)
    american_indian_and_alaska_native_alone = models.FloatField(null=True)
    native_hawaiian_and_other_pacific_islander_alone = models.FloatField(null=True)
    white_alone = models.FloatField(null=True)
    black_or_african_american_alone = models.FloatField(null=True)
    not_hispanic_or_latino = models.FloatField(null=True)
    hispanic_or_latino_of_any_race = models.FloatField(null=True)
    geom = models.MultiPolygonField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()

    class Meta:
        managed = False
        db_table = "drf_acs_2019_5y_estimates_geom"

class ejscreen_subset_geom(models.Model):
    geoid10 = models.TextField(12,null=False)
    d_ldpnt_2 = models.FloatField(null=True)
    d_dslpm_2 = models.FloatField(null=True)
    d_cancr_2 = models.FloatField(null=True)
    d_resp_2 = models.FloatField(null=True)
    d_ptraf_2 = models.FloatField(null=True)
    d_pwdis_2 = models.FloatField(null=True)
    d_pnpl_2 = models.FloatField(null=True)
    d_prmp_2 = models.FloatField(null=True)
    d_ptsdf_2 = models.FloatField(null=True)
    d_ozone_2 = models.FloatField(null=True)
    d_pm25_2 = models.FloatField(null=True)
    geom = models.MultiPolygonField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()

    class Meta:
        managed = False
        db_table = "drf_ejscreen_subset_geom"

class nc_covid_zipcode_geom(models.Model):
    zipcode = models.TextField(5,null=False) 
    cases = models.IntegerField()
    cases_per_10000_res = models.FloatField(null=True)
    cases_per_100000_res = models.FloatField(null=True)
    deaths = models.IntegerField()
    geom = models.MultiPolygonField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()

    class Meta:
        managed = False
        db_table = "drf_nc_covid_zipcode_geom"

class nc_preterm_subset_geom(models.Model):
    geoid10 = models.TextField(11, null=True)
    fc_calcega_mean_avg = models.FloatField(null=True)
    fc_calcega_med = models.FloatField(null=True)
    fc_calcpreterm_percentage = models.FloatField(null=True)
    fc_clinega_mean_avg = models.FloatField(null=True)
    fc_clinega_med = models.FloatField(null=True)
    fc_clinpreterm_percentage = models.FloatField(null=True)
    sc_calcega_mean_avg = models.FloatField(null=True)
    sc_calcega_med = models.FloatField(null=True)
    sc_calcpreterm_percentage = models.FloatField(null=True)
    sc_clinega_mean_avg = models.FloatField(null=True)
    sc_clinega_med = models.FloatField(null=True) 
    sc_clinpreterm_percentage = models.FloatField(null=True)
    geom = models.MultiPolygonField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()

    class Meta:
        managed = False
        db_table = "drf_nc_preterm_subset_geom"

class nc_wildfires_geom(models.Model):
    geoid20 = models.TextField(11, null=True)
    wildfire_haz_pot_qnum = models.FloatField()
    wildfire_haz_pot_qprcnt = models.TextField(8, null=False)
    geom = models.MultiPolygonField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()

    class Meta:
        managed = False
        db_table = "drf_nc_wildfires_geom"

class nc_superfund_sites(models.Model):
    superfund_site = models.TextField(55, null=True)
    city = models.TextField(15, null=True)
    county = models.TextField(16, null=True)
    state = models.TextField(2, null=True)
    country = models.TextField(2, null=True)
    region = models.IntegerField()
    year_proposed = models.FloatField()
    year_listed = models.FloatField()
    year_complete = models.FloatField()
    year_deleted = models.TextField(12, null=True)
    years_listed_current = models.TextField(17, null=True)
    years_listed_deleted = models.TextField(17, null=True)
    partial_deletion = models.TextField(4, null=True)
    hazard_rank_sys_score = models.FloatField(null=True)
    status = models.TextField(31, null=True)
    latitude = models.FloatField(null=True)
    longitude = models.FloatField(null=True)
    geom = models.PointField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()

class hospitals_4326(models.Model):
    objectid = models.IntegerField()
    facility = models.TextField(60, null=True)
    licensee = models.TextField(53, null=True)
    expires = models.TextField(11, null=True)
    hgenlic = models.IntegerField()
    rehabhlic = models.IntegerField()
    psylic = models.IntegerField()
    salic = models.IntegerField()
    detoxlic = models.IntegerField()
    hoslic = models.IntegerField()
    rsrchlic = models.IntegerField()
    nfgenlic = models.IntegerField()
    othrhlic = models.IntegerField()
    alzlic = models.IntegerField()
    hivlic = models.IntegerField()
    tbilic = models.IntegerField()
    venlic = models.IntegerField()
    othnflic = models.IntegerField()
    rehabnlic = models.IntegerField()
    haalzlic = models.IntegerField()
    hahivlic = models.IntegerField()
    hagenlic = models.IntegerField()
    orheart_hl = models.IntegerField()
    orcsect_hl = models.IntegerField()
    orother_hl = models.IntegerField()
    oramsu_hl = models.IntegerField()
    orshare_hl = models.IntegerField()
    orendo_hl = models.IntegerField()
    altfacname = models.TextField(57, null=True)
    hltype = models.TextField(8, null=True)
    stype = models.TextField(3, null=True)
    fcounty = models.TextField(12, null=True)
    fcity = models.TextField(16, null=True)
    fstate = models.TextField(2, null=True)
    fzip = models.TextField(10, null=True)
    faddr1 = models.TextField(35, null=True)
    fphone = models.TextField(13, null=True)
    licno = models.TextField(7, null=True)
    geom = models.PointField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()
    
class public_schools_4326(models.Model):
    objectid = models.IntegerField()
    lea_school = models.TextField(6, null=True)	
    ptmoved = models.TextField(9, null=True)
    comments = models.TextField(39, null=True)
    reviewed = models.TextField(1, null=True)
    school_nam = models.TextField(47, null=True)
    principal = models.TextField(26, null=True)
    street_lon = models.TextField(32, null=True)
    phys_addr = models.TextField(28, null=True)
    phys_city = models.TextField(20, null=True)
    phys_zip = models.IntegerField()
    phone = models.TextField(13, null=True)
    mail_addr = models.TextField(29, null=True)
    mail_city = models.TextField(20, null=True)
    mail_zip = models.IntegerField()
    fax = models.TextField(13, null=True)
    url_addres = models.TextField(50, null=True)
    county = models.TextField(12)
    accr_stat = models.TextField(2, null=True)
    sch_desg = models.TextField(7, null=True)
    sch_type = models.TextField(21, null=True)
    sch_ptype = models.TextField(25, null=True)
    sch_ctype = models.TextField(26, null=True)
    ext_hours = models.TextField(1, null=True)
    num_teach = models.IntegerField()
    bgn_grade = models.TextField(2, null=True)
    end_grade = models.TextField(2, null=True)
    pre_k = models.TextField(3, null=True)
    elem = models.TextField(3, null=True)
    middle = models.TextField(3, null=True)
    high = models.TextField(3, null=True)
    early_coll = models.TextField(3, null=True)
    geom = models.PointField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()
    
class non_public_schools_4326(models.Model):
    objectid_1 = models.IntegerField()
    objectid = models.IntegerField()
    schoolid = models.IntegerField()
    county = models.TextField(12, null=True)
    schoolname = models.TextField(40, null=True)
    address = models.TextField(36, null=True)
    city = models.TextField(16, null=True)
    state = models.TextField(2, null=True)
    zipcode = models.IntegerField()
    website = models.TextField(50, null=True)
    schooltype = models.TextField(11, null=True)
    geom = models.PointField(null=True)
    objects = models.Manager()
    vector_tiles = MVTManager()
